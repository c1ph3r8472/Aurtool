#!/usr/bin/env bash

#
#  Aurtool V0.2 beta
#
#  Maintainer: Eris Nihila (M1ndFlay3r)
#              sp0t1fyfr33tr1alabus3@outlook.com
#
# This software comes with absolutely NO WARRANTY, expressed or implied. Any and all use of this software is entirely
# at your own risk. By using this software you agree to release and forever discharge the developer from all manner of actions,
# cause of action, debts, accounts, bonds, contracts, claims and demands for or by any reason of damage, loss (including data loss)
# or injury to person or property that has been or may be sustained as a result of your usage of this software.
#
# This software is shipped under the GNU General Public License and is provided "as is", with no explicit or implied expectation or
# obligation to provide support, development, or otherwise unspecified services of any kind. Furthermore, the developer reserves the
# right to cease development at any time for any reason, with no obligation to provide reason(s) for cessation.
#
#
#

OP=$1
USR="$(whoami)"
STARTDIR=$(pwd)
PATH=$STARTDIR/${BASH_SOURCE%/*}:$PATH

#library functions borrowed from lemonlib
function isyes {
  if [ ! -z "$1" ]; then
    read -p "$1  " ANSWER
  else
    read ANSWER
  fi
  if [ -z "$ANSWER" ]; then
    ANSWER="y"
  fi
  if [ $ANSWER == y ] || [ $ANSWER == Y ] || [ $ANSWER == yes ] || [ $ANSWER == Yes ] || [ $ANSWER == YES ]; then
    yes=0 && return 0
  else
    yes=1 && return 1
  fi
}

function isvalidresponse {
  if [ -z "$OP" ]; then
    OP="NULL"
  fi
  for i in "${VALID[@]}"; do
    if echo "$i" | grep "$OP" &> /dev/null; then
      return 0
    fi
  done
}

#script body
VALID=("-S" "-Sy" "-Syu" "-Ss" "--help" "-Syyu" "-Sss" "--version")
if ! isvalidresponse; then
  echo "Invalid command!"
  echo "--help for help"
  exit 1
fi

if [ "$USR" == root ]; then
  echo "Error: aurtool cannot be run as root!"
  exit 1
fi

if [ "$OP" == -Ss ]; then
  if [ -z ${@:2} ]; then
    echo "Error: -Ss requires additional input."
    echo "aurtool --help for help page"
    exit 1
  fi
  package-query -A -s ${@:2}
fi

if [ "$OP" == -Sss ]; then
  if [ -z ${@:2} ]; then
    echo "Error: -Sss requires additional input."
    echo "aurtool --help for help page"
    exit 1
  fi
  echo "-"
  echo "Non-AUR"
  echo "-"
  pacman -Ss ${@:2}
  echo "-"
  echo "AUR"
  echo "-"
  package-query -A -s ${@:2}
fi

if [ "$OP" == -S ]; then
  if [ -z ${@:2} ]; then
    echo "Error: -S requires additional input."
    echo "aurtool --help for help page"
    exit 1
  fi
  for b in ${@:2}; do
    cd $HOME
    mkdir .aurtool
    cd .aurtool
    git clone http://aur.archlinux.org/$b.git
    cd $b
    PKGB=./PKGBUILD
    if [ ! -f $PKGB ]; then
      echo "Error: package does not exist by the name $b!"
      echo "Aborting"
      exit 1
    fi
    #
    # Yes, this is a pointless function that uses up 3 lines unnecessarily. The script didn't behave properly without it. Bash has moods, and Brian Fox hates us all.
    #
    function PKGBUILD {
    if isyes "Would you like to edit the PKGBUILD? (Y/n)" ; then
      if which nano &> /dev/null; then
        nano ./PKGBUILD
      else
        if which vim &> /dev/null; then
          vim ./PKGBUILD
        else
          echo "No suitable text editor found!"
          echo "If one is present on the system, enter its command now (eg: nano, vim, emacs, etc). Otherwise leave blank to skip PKGBUILD editing."
          read PKGEDIT
          if [ -z "$PKGEDIT" ]; then
            PKGEDIT="NULL"
          fi
          if [ -v $PKGEDIT ]; then 
            $PKGEDIT ./PKGBUILD
          fi
        fi
      fi
    fi
    }
    PKGBUILD
    unset makedepends
    unset optdepends
    unset depends
    source ./PKGBUILD
    uDEPS=(${makedepends[@]} ${depends[@]})
    for i in ${uDEPS[@]}; do
      i=${i%=*}
      i=${i%>*}
      i=${i%<*}
      DEPS=(${DEPS[@]} $i)
    done
    for i in ${DEPS[@]}; do
      if ! pacman -Ql $i &> /dev/null; then
        echo "Trying to install $i with pacman (dependency)"
        if ! sudo pacman -S --noconfirm --needed $i; then
          echo "Installing $i with pacman failed"
          echo "Trying to install $i from AUR"
          if ! NODEL=1 aurtool -S $i; then
            echo "FATAL: Unable to install dependency $i!"
            exit 1
          fi
        fi
      fi
    done
    if ! makepkg -csi; then
      echo "Error! Aborting"
      cd $HOME
      exit 1
    fi
    cd $HOME/.aurtool
  done
  if [ -z "$NODEL" ]; then
    NODEL="0"
  fi
  if [ ! "$NODEL" == 1 ]; then
    if isyes "Build files and / or built packages are stored in .aurtool in your home directory. Would you like to delete them? (Y/n)"; then
      echo "Cleaning up.."
      rm -rf $HOME/.aurtool
    fi
  fi
fi

if [ "$OP" == -Sy ]; then
  package-query -A -u
fi

if [ "$OP" == -Syu ]; then
  UPD=$(package-query -A -u | grep -oP "aur/\K[^ ]*")
  if [ -z "$UPD" ]; then
    echo "There is nothing to do"
    exit 0
  fi
  for i in $UPD; do
    aurtool -S $i
  done
fi

if [ "$OP" == -Syyu ]; then
  echo "Updating non-AUR packages..."
  sudo pacman -Syu
  echo "Updating AUR packages..."
  aurtool -Syu
fi

if [ "$OP" == --version ]; then
  echo "aurtool V0.2 beta"
fi

if [ "$OP" == --help ]; then
  echo " Aurtool - minimal AUR package management system"
  echo " ------------------------------------------------------"
  echo " options:"
  echo " --------"
  echo " -S     - install a package (or update a single package)."
  echo " -Sy    - check for updates to installed AUR packages"
  echo " -Syu   - install all available updates to AUR packages"
  echo " -Syyu  - install all available updates to both AUR and non-AUR packages"
  echo " -Ss    - search the AUR for a package by name"
  echo " -Sss   - search both repositories and AUR for package by name"
  echo " --help - display this help dialog"
  echo " ------------------------------------------------------"
fi

