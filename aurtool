#!/usr/bin/env bash

#
#  Aurtool V1.0 RC1
#
#  Maintainer: Eris Nihila (M1ndFlay3r)
#              sp0t1fyfr33tr1alabus3@outlook.com
#
# This software comes with absolutely NO WARRANTY, expressed or implied. Any and all use of this software is entirely
# at your own risk. By using this software you agree to release and forever discharge the developer from all manner of actions,
# cause of action, debts, accounts, bonds, contracts, claims and demands for or by any reason of damage, loss (including data loss)
# or injury to person or property that has been or may be sustained as a result of your usage of this software.
#
# This software is shipped under the GNU General Public License and is provided "as is", with no explicit or implied expectation or
# obligation to provide support, development, or otherwise unspecified services of any kind. Furthermore, the developer reserves the
# right to cease development at any time for any reason, with no obligation to provide reason(s) for cessation.
#
#
#


### initialization steps
###
OP=$1
OPINPUT="${@:2}"
USR="$(whoami)"
STARTDIR=$(pwd)
PATH=$STARTDIR/${BASH_SOURCE%/*}:$PATH
LIBDEFLOC=/usr/include/libaurtool
if [ -f "$LIBDEFLOC" ]; then
  source /usr/include/libaurtool
else
  source ${BASH_SOURCE%/*}/resources/libaurtool
fi
GOAHEAD="0"
if [ -z "$NCHECKALL" ]; then
  NCHECKALL="0"
fi
###


### checks for invalid run conditions
###
if [ "$USR" == root ]; then
  ctext red std "Error: aurtool cannot be run as root!"
  exit 13
fi

VALID=("-S" "-Sy" "-Syu" "-Ss" "--help" "-Syyu" "-Sss" "--version" "-SS" "-R")
if [ ! -z "$OP" ]; then
  if ! isvalidoperation "$1" ${VALID[@]}; then
    ctext red nnl "Error: "
    ctext magenta nnl "$1"
    ctext red std ": Invalid command!"
    ctext yellow std "Do aurtool --help for help page"
    exit 22
  fi
else
  ctext red std "Error: aurtool requires input!"
  ctext yellow std "Do aurtool --help for help page"
  exit 22
fi

if ! which package-query &> /dev/null; then
  if [ -z "$PKGQUERYINS" ]; then
    PKGQUERYINS="0"
  fi
  if [ ! $PKGQUERYINS == 1 ]; then
    ctext magenta std "Error: package-query not found in PATH!"
    if ! isyes "$(ctext yellow nnl "Install it now? (Y/n)")"; then
      exit 65
    else
      PKGQUERYINS="1" NCHECKALL="1" aurtool -S package-query
    fi
  fi
fi

function OPERROR {
  if [ -z "$OPINPUT" ]; then
    ctext red std "Error: $OP requires additional input."
    ctext yellow std "Do aurtool --help for help page"
    exit 22
  fi
}
###


### Script functionality begins here.
### Yes, I wrote the functions as if statements.
### No, it does not have any effects on functionality.
### No, I don't know why I did that. I was high. Get off my back.
###
if [ "$OP" == -Ss ]; then
  OPERROR
  package-query -A -s ${@:2}
fi

if [ "$OP" == -Sss ]; then
  OPERROR
  ctext yellow std "---------"
  ctext yellow std " Non-AUR "
  ctext yellow std "---------"
  pacsearch ${@:2}
  ctext yellow std "---------"
  ctext yellow std "   AUR   "
  ctext yellow std "---------"
  package-query -A -s ${@:2}
fi

if [ "$OP" == -S ]; then
  OPERROR
  if [ $NCHECKALL == 0 ]; then
    echo " "
    for dD in ${@:2}; do
      ctext blue nnl " $dD"
    done
    echo " "
    echo " "
    if isyes "$(ctext yellow nnl "Install these packages? (Y/n)")"; then
      GOAHEAD="1"
    else
      GOAHEAD="0"
    fi
  else
      GOAHEAD="1"
      NCHECKALL="0"
  fi
  if [ $GOAHEAD == "1" ]; then
    for b in ${@:2}; do
      cd $HOME
      mkdir .aurtool
      cd .aurtool
      if [ $b == dxvk-mingw-git ]; then
        b="dxvk-git"
      elif [ $b == openrazer-daemon ] || [ $b == openrazer-driver-dkms ] || [ $b == openrazer-meta ] || [ $b == python-openrazer ]; then
        b="openrazer"
      fi
      git clone http://aur.archlinux.org/$b.git
      cd $b
      PKGB=./PKGBUILD
      if [ ! -f $PKGB ]; then
        ctext red std "Error: package does not exist by the name $b!"
        ctext magenta std "Aborting"
        cd $HOME
        exit 6
      fi
      #
      # Yes, this is a pointless function that uses up 3 lines unnecessarily. The script didn't behave properly without it. Bash has moods, and Brian Fox hates us all.
      #
      function PKGBUILD {
      if DEFINVERT="1" isyes "$(ctext yellow nnl "Would you like to edit the PKGBUILD? (y/N)")"; then
        if which nano &> /dev/null; then
          nano ./PKGBUILD
        else
          if which vim &> /dev/null; then
            vim ./PKGBUILD
          else
            ctext magenta std "No suitable text editor found!"
            ctext yellow nnl "If one is present on the system, enter its command now (eg: nano, vim, emacs, etc). Otherwise leave blank to skip PKGBUILD editing: "
            read PKGEDIT
            if [ -z "$PKGEDIT" ]; then
              PKGEDIT="NULL"
            fi
            if [ -v $PKGEDIT ]; then
              $PKGEDIT ./PKGBUILD
            fi
          fi
        fi
      fi
      }
      PKGBUILD
      unset makedepends
      unset optdepends
      unset depends
      source ./PKGBUILD
      uDEPS=(${makedepends[@]} ${depends[@]})
      for i in ${uDEPS[@]}; do
        i=${i%=*}
        i=${i%>*}
        i=${i%<*}
        DEPS=(${DEPS[@]} $i)
      done
      for i in ${DEPS[@]}; do
        if ! pacman -Ql $i &> /dev/null; then
          ctext yellow std "Trying to install $i with pacman (dependency)"
          if ! sudo pacman -S --noconfirm --needed $i; then
            ctext magenta std "Installing $i with pacman failed"
            ctext yellow std "Trying to install $i from AUR"
            if ! NODEL="1" NCHECKALL="1" aurtool -S $i; then
              ctext red std "FATAL: Unable to install dependency $i!"
              cd $HOME
              exit 65
            fi
          fi
        fi
      done
      if ! makepkg -csi; then
        ctext red std "Error! Aborting"
        cd $HOME
        exit 131
      fi
      cd $HOME/.aurtool
    done
    if [ -z "$NODEL" ]; then
      NODEL="0"
    fi
    if [ ! "$NODEL" == 1 ]; then
      if isyes "$(ctext yellow nnl "Build files and / or built packages are stored in .aurtool in your home directory. Would you like to delete them? (Y/n)")"; then
        echo "Cleaning up.."
        cd $HOME
        rm -rf $HOME/.aurtool
      fi
    fi
  else
    echo "Aborting"
    cd $HOME
    exit 125
  fi
fi

if [ "$OP" == -Sy ]; then
  UPD=$(package-query -A -u)
  if [ -z "$UPD" ]; then
    ctext yellow std "No AUR package updates available"
    exit 0
  else
    echo " "
    ctext blue std "$UPD"
    echo " "
  fi
fi

if [ "$OP" == -Syu ]; then
  UPD=$(package-query -A -u | grep -oP "aur/\K[^ ]*")
  if [ -z "$UPD" ]; then
    echo "There is nothing to do"
    exit 0
  fi
  echo " "
  for vV in $UPD; do
    ctext blue nnl " $vV"
  done
  echo " "
  echo " "
  if isyes "$(ctext yellow nnl "Update these AUR packages? (Y/n)")"; then
    for i in $UPD; do
      NCHECKALL="1" aurtool -S $i
    done
  else
    echo "Aborting"
    cd $HOME
    exit 125
  fi
fi

if [ "$OP" == -Syyu ]; then
  ctext yellow std "Updating non-AUR packages..."
  sudo pacman -Syu
  ctext yellow std "Updating AUR packages..."
  aurtool -Syu
fi

if [ "$OP" == -SS ]; then
  OPERROR
  echo " "
  for dD in ${@:2}; do
    ctext blue nnl " $dD"
  done
  echo " "
  echo " "
  if isyes "$(ctext yellow nnl "Install these packages? (Y/n)")"; then
    for m in ${@:2}; do
      ctext yellow std "Trying to install $m using pacman..."
      if ! sudo pacman -S --needed --noconfirm $m; then
        ctext magenta std "Installing $m using pacman failed!"
        ctext yellow std "Trying to install $m using AUR..."
        NCHECKALL="1" aurtool -S $m
      fi
    done
  else
    echo "Aborting"
    cd $HOME
    exit 125
  fi
fi

if [ "$OP" == -R ]; then
  OPERROR
  echo " "
  for dD in ${@:2}; do
    ctext blue nnl " $dD"
  done
  echo " "
  echo " "
  if isyes "$(ctext yellow nnl "Remove these packages? (Y/n)")"; then
    for u in ${@:2}; do
      sudo pacman -R --noconfirm $u
    done
  else
    ctext magenta std "Aborting"
    cd $HOME
    exit 125
  fi
fi

if [ "$OP" == --version ]; then
  ctext yellow std "aurtool V1.0 RC1"
fi

if [ "$OP" == --help ]; then
  ctext yellow std " --------------------------------------------------------------------------------------"
  ctext yellow std "                     Aurtool - minimal AUR package management system                   "
  ctext yellow std " --------------------------------------------------------------------------------------"
  ctext yellow std "  options:                                                                             "
  ctext yellow std "  --------                                                                             "
  ctext yellow std "  -S          -   install an AUR package (or update a single AUR package).             "
  ctext yellow std "  -SS         -   install a package, trying pacman first, and AUR if pacman fails      "
  ctext yellow std "  -Sy         -   check for updates to installed AUR packages                          "
  ctext yellow std "  -Syu        -   install all available updates to AUR packages                        "
  ctext yellow std "  -Syyu       -   install all available updates to both AUR and non-AUR packages       "
  ctext yellow std "  -Ss         -   search the AUR for a package by name                                 "
  ctext yellow std "  -Sss        -   search both repositories and AUR for package by name                 "
  ctext yellow std "  -R          -   remove a package                                                     "
  ctext yellow std "  --help      -   display this help dialog                                             "
  ctext yellow std "  --version   -   display aurtool version info                                         "
  ctext yellow std " --------------------------------------------------------------------------------------"
fi
###
